version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: suldlss/rialto-webapp
    docker:
    - image: circleci/ruby:2.7.1-node
      environment:
        RAILS_ENV=production
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/ruby:2.7.1-node
      environment:
        BUNDLE_JOBS: 3
        BUNDLE_RETRY: 3
        BUNDLE_PATH: vendor/bundle
        PGHOST: 127.0.0.1
        PGUSER: circleci-demo-ruby
        RAILS_ENV: test
    - image: circleci/postgres:9.5-alpine
      environment:
        POSTGRES_USER: postgres
        POSTGRES_DB: rialto_test
        POSTGRES_PASSWORD: ""
    - image: solr:7
      command: bin/solr -cloud -noprompt -f -p 8983
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp

      - run:
          name: Install/Upgrade Bundler
          command: gem install bundler
      - run:
          name: Which version of bundler?
          command: bundle -v
      - restore_cache:
          keys:
          - app-bundle-v2-{{ checksum "Gemfile.lock" }}
          - app-bundle-v2-
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - save_cache:
          key: app-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
          - vendor/bundle

  prepare-coverage:
    <<: *defaults
    steps:
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter

  backend-tests:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp

      - run:
          name: Install/Upgrade Bundler
          command: gem install bundler
      - restore_cache:
          keys:
          - app-bundle-v2-{{ checksum "Gemfile.lock" }}
          - app-bundle-v2-
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      - run:
          name: Check styles using rubocop
          command: bundle exec rubocop

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      # Create a Solr collection
      - run:
          name: Load config into SolrCloud
          command: |
            cd solr/conf
            zip -1 -r solr_config.zip ./*
            curl -H "Content-type:application/octet-stream" --data-binary @solr_config.zip "http://localhost:8983/solr/admin/configs?action=UPLOAD&name=blacklight-core"
            curl -H 'Content-type: application/json' http://localhost:8983/api/collections/ -d '{create: {name: blacklight-core, config: blacklight-core, numShards: 1}}'
      - run:
          name: Run backend tests
          command: |
            bundle exec rspec -f j
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.backend.json coverage/.resultset.json
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.backend.json

  frontend-tests:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp

      - restore_cache:
          keys:
            - app-yarn-{{ checksum "yarn.lock" }}
            - app-yarn-
      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
      - save_cache:
          key: app-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Run frontend tests
          command: |
            npm test
            ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.frontend.json coverage/jest/lcov.info
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.frontend.json

  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

  build-image:
    executor: docker-publisher
    steps:
    - checkout
    - setup_remote_docker
    # Upgrade bundler
    - run:
        name: Install Bundler
        command: gem install bundler

    # Which version of bundler?
    - run:
        name: Which bundler?
        command: bundle -v

    - run:
        name: Bundle Install
        command: bundle check || bundle install

    - run:
        name: Build Docker image
        command: |
          echo $MASTER_KEY > config/master.key
          ./bin/build

    - run:
        name: Archive Docker image
        command: |
          docker save -o image.tar $IMAGE_NAME

    - persist_to_workspace:
        root: .
        paths:
        - ./image.tar
  publish-latest:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/image.tar

    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker push $IMAGE_NAME:latest

  publish-tag:
    executor: docker-publisher
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: |
          docker load -i /tmp/workspace/image.tar

    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CIRCLE_TAG
          docker push $IMAGE_NAME:$CIRCLE_TAG

workflows:
  version: 2

  test:
    jobs:
    - build
    - prepare-coverage:
        requires:
          - build
    - backend-tests:
        requires:
          - prepare-coverage
    - frontend-tests:
        requires:
           - prepare-coverage
    - upload-coverage:
        requires:
           - backend-tests
           - frontend-tests
  publish-latest-image:
    jobs:
    - build-image:
        filters:
          branches:
            only: master
    - publish-latest:
        requires:
        - build-image
        filters:
          branches:
            only: master
  build-tags:
    jobs:
    - build-image:
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
    - publish-tag:
        requires:
        - build-image
        filters:
          tags:
            only: /^[0-9]+\.[0-9]+\.[0-9]+/
          branches:
            ignore: /.*/
